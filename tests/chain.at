# Exercising Useless Chains Elimination.                    -*- Autotest -*-

# Copyright (C) 2019 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

AT_BANNER([[Useless Chains Elimination.]])


# AT_CHAIN_PARSERS(NTERMS, [DIRECTIVES], RULES)
# ---------------------------------------------
m4_pushdef([AT_CHAIN_PARSERS],
[AT_KEYWORDS([chain])

AT_BISON_OPTION_PUSHDEFS([%define parse.trace $2])

AT_DATA_GRAMMAR([[input.y]],
[[%code {
  #include <ctype.h>  /* isdigit. */
  #include <stdio.h>
  #include <stdlib.h> /* abort. */
  #include <string.h> /* strcmp. */

  ]AT_YYLEX_DECLARE[
  ]AT_YYERROR_DECLARE[
}

%define parse.assert
%define parse.error verbose
%define parse.trace
]$2[
]AT_CXX_IF([[
%define global_tokens_and_yystype
]])[

%union {
  int val;
}
%token <val> NUM
%type  <val> ]$1[
%printer { ]AT_CXX_IF([[yyo << $$]],
                      [[fprintf (yyo, "%d", $$)]])[; } <val>

%%
]$3[
%%

]AT_YYLEX_PROTOTYPE[
{
  int c = getchar ();
  while (isspace (c))
    c = getchar ();

  if (isdigit (c))
    {
      ungetc (c, stdin);
      if (scanf ("%d", &]AT_VAL[.val) != 1)
        abort ();
      return ]AT_TOKEN_PREFIX[NUM;
    }
  else
    return c;
}

]AT_YYERROR_DEFINE[
]AT_MAIN_DEFINE[
]])

AT_CHECK([cp input.y with-chains.y])
AT_FULL_COMPILE([[with-chains]], [], [], [],
                [--trace=sets 2>with-chains.traces])

AT_CHECK([cp input.y without-chains.y])
AT_FULL_COMPILE([[without-chains]], [], [], [],
                [-fchain --trace=sets 2>without-chains.traces])

AT_BISON_OPTION_POPDEFS
])


# AT_CHAIN_CHECK(INPUT, EXPOUT, NUM-REDS-WITH-CHAINS, NUM-REDS-WITHOUT-CHAINS)
# ----------------------------------------------------------------------------
m4_pushdef([AT_CHAIN_CHECK],
[AT_DATA([[in.txt]],
[[$1
]])
AT_PARSER_CHECK([with-chains -s <in.txt], [0], [m4_ifval([$2], [$2
])], [stderr])
# AT_CHECK([sed -n '/num_reductions: /{s///;p;q;}' stderr], [], [$3
# ])
AT_CHECK([grep -c '^Reducing' stderr], [], [m4_if([$3], [ignore], [$3], [$3
])])

AT_PARSER_CHECK([without-chains -s <in.txt], [0], [m4_ifval([$2], [$2
])], [stderr])
#AT_CHECK([sed -n '/num_reductions: /{s///;p;q;}' stderr], [], [$4
#])
AT_CHECK([grep -c '^Reducing' stderr], [], [m4_if([$3], [ignore], [$4], [$4
])])
])
])


m4_foreach([b4_skel], [[yacc.c], [lalr1.cc]],
[
## --------- ##
## Lalonde.  ##
## --------- ##

AT_SETUP([Lalonde: b4_skel])

AT_CHAIN_PARSERS([expr term], [%skeleton "]b4_skel["],
[[
res:  expr { printf ("%d\n", $1); };
expr: expr '+' term { $$ = $1 + $3; } | term;
term: term '*' NUM  { $$ = $1 * $3; } | NUM;
]])

AT_SETS_CHECK([with-chains.traces], [DESCENDANTS, LEAVES],
[[DESCENDANTS
  $accept: $accept
  res: res
  expr: expr
  term: term
LEAVES
  $accept: $accept
  res: res
  expr: expr
  term: term
]])

AT_SETS_CHECK([without-chains.traces], [DESCENDANTS, LEAVES],
[[DESCENDANTS
  $accept: $accept
  res: res
  expr: NUM expr term
  term: NUM term
LEAVES
  $accept: $accept
  res: res
  expr: NUM
  term: NUM
]])

AT_CHAIN_CHECK([1],          [1], [3], [1])
AT_CHAIN_CHECK([1+2],        [3], [5], [2])
AT_CHAIN_CHECK([1+2*3],      [7], [6], [3])
AT_CHAIN_CHECK([1+2*3*4+5], [30], [9], [5])
AT_CHAIN_CHECK([1*2+3+4*5], [25], [9], [5])

AT_CLEANUP
])

## ------------------ ##
## Full Arithmetics.  ##
## ------------------ ##

m4_foreach([b4_skel], [[yacc.c], [lalr1.cc]],
[
AT_SETUP([Full Arithmetics: b4_skel])

AT_CHAIN_PARSERS([expr term fact], [%skeleton "]b4_skel["],
[[
res:  expr           { printf ("%d\n", $1); };
expr: expr '+' term  { $$ = $1 + $3; }
    | expr '-' term  { $$ = $1 - $3; }
    | term;
term: term '*' fact  { $$ = $1 * $3; }
    | term '/' fact  { $$ = $1 / $3; }
    | fact;
fact: '(' expr ')'   { $$ = $2; }
    | '-' fact       { $$ = -$2; }
    | '+' fact       { $$ = $2; }
    | NUM;
]])

AT_SETS_CHECK([with-chains.traces], [DESCENDANTS, LEAVES],
[[DESCENDANTS
  $accept: $accept
  res: res
  expr: expr
  term: term
  fact: fact
LEAVES
  $accept: $accept
  res: res
  expr: expr
  term: term
  fact: fact
]])

AT_SETS_CHECK([without-chains.traces], [DESCENDANTS, LEAVES],
[[DESCENDANTS
  $accept: $accept
  res: res
  expr: NUM expr term fact
  term: NUM term fact
  fact: NUM fact
LEAVES
  $accept: $accept
  res: res
  expr: NUM
  term: NUM
  fact: NUM
]])


AT_CHAIN_CHECK([1],              [1],  [4], [1])
AT_CHAIN_CHECK([1+2],            [3],  [7], [2])
AT_CHAIN_CHECK([1+2+3],          [6], [10], [3])
AT_CHAIN_CHECK([(1)],            [1],  [7], [2])
AT_CHAIN_CHECK([(1+2)],          [3], [10], [3])
AT_CHAIN_CHECK([(1)+((2)+(3))],  [6], [22], [7])
AT_CHAIN_CHECK([1-2-3],         [-4], [10], [3])
AT_CHAIN_CHECK([1-(2-3)],        [2], [13], [4])
AT_CHAIN_CHECK([1+2*3],          [7],  [9], [3])
AT_CHAIN_CHECK([(1+2)*3],        [9], [12], [4])
AT_CHAIN_CHECK([(+1+--2)*3],     [9], [15], [7])
AT_CHAIN_CHECK([(+1+--2)*+3],    [9], [16], [8])

AT_CLEANUP
])


## ---------------------- ##
## Nullable Arithmetics.  ##
## ---------------------- ##

m4_foreach([b4_skel], [[yacc.c], [lalr1.cc]],
[
AT_SETUP([Nullable Arithmetics: b4_skel])

AT_CHAIN_PARSERS([expr term fact], [%skeleton "]b4_skel["],
[[
res:  expr           { printf ("%d\n", $1); };
expr: expr '+' term  { $$ = $1 + $3; }
    | term;
term: term '*' fact  { $$ = $1 * $3; }
    | fact;
fact: NUM
    | %empty         { $$ = 10; };
]])

AT_SETS_CHECK([with-chains.traces], [DESCENDANTS, LEAVES],
[[DESCENDANTS
  $accept: $accept
  res: res
  expr: expr
  term: term
  fact: fact
LEAVES
  $accept: $accept
  res: res
  expr: expr
  term: term
  fact: fact
]])

AT_SETS_CHECK([without-chains.traces], [DESCENDANTS, LEAVES],
[[DESCENDANTS
  $accept: $accept
  res: res
  expr: NUM expr term fact
  term: NUM term fact
  fact: NUM fact
LEAVES
  $accept: $accept
  res: res
  expr: NUM
  term: NUM
  fact: NUM
]])


AT_CHAIN_CHECK([1+2+3], [6], [10], [3])
AT_CHAIN_CHECK([+2+3], [15], [10], [4])
AT_CHAIN_CHECK([1++3], [14], [10], [4])
AT_CHAIN_CHECK([1+2+], [13], [10], [4])
AT_CHAIN_CHECK([++3],  [23], [10], [5])
AT_CHAIN_CHECK([+2+],  [22], [10], [5])
AT_CHAIN_CHECK([1++],  [21], [10], [5])
AT_CHAIN_CHECK([++],   [30], [10], [6])
AT_CHAIN_CHECK([+],    [20],  [7], [4])
AT_CHAIN_CHECK([],     [10],  [4], [2])

AT_CHAIN_CHECK([1+2*3], [7],  [9], [3])
AT_CHAIN_CHECK([+2*3], [16],  [9], [4])
AT_CHAIN_CHECK([1+*3], [31],  [9], [4])
AT_CHAIN_CHECK([1+2*], [21],  [9], [4])
AT_CHAIN_CHECK([+*3],  [40],  [9], [5])
AT_CHAIN_CHECK([1+*], [101],  [9], [5])
AT_CHAIN_CHECK([+2*],  [30],  [9], [5])
AT_CHAIN_CHECK([+*],  [110],  [9], [6])

AT_CHAIN_CHECK([1*2+3], [5],  [9], [3])
AT_CHAIN_CHECK([*2+3], [23],  [9], [4])
AT_CHAIN_CHECK([1*+3], [13],  [9], [4])
AT_CHAIN_CHECK([1*2+], [12],  [9], [4])
AT_CHAIN_CHECK([*+3], [103],  [9], [5])
AT_CHAIN_CHECK([1*+],  [20],  [9], [5])
AT_CHAIN_CHECK([*2+],  [30],  [9], [5])
AT_CHAIN_CHECK([*+],  [110],  [9], [6])

AT_CLEANUP
])



## ---------------- ##
## Bison Rule Rhs.  ##
## ---------------- ##

m4_foreach([b4_skel], [[yacc.c], [lalr1.cc]],
[
AT_SETUP([Bison Rule Rhs: b4_skel])

# At some point during the development of -fchain Bison compiled with
# -fchain was unable to parse its own grammar.  This test is a
# reduction of the problem.  This failure revealed that we need to be
# ready to look for *all* the paths in build_relations.  It prompted
# the creation of build_path in lalr.c.

AT_CHAIN_PARSERS(['i' 's'], [%skeleton "]b4_skel["],
[[rhs:
  symbol named_ref.opt
;

named_ref.opt:
  %empty
| 'b'    /* BRACKETED_ID */
;

symbol:
  'i'    /* ID */
| 's'    /* STRING */
;

]])

AT_SETS_CHECK([with-chains.traces], [DESCENDANTS, LEAVES],
[[DESCENDANTS
  $accept: $accept
  rhs: rhs
  named_ref.opt: named_ref.opt
  symbol: symbol
LEAVES
  $accept: $accept
  rhs: rhs
  named_ref.opt: named_ref.opt
  symbol: symbol
]])

AT_SETS_CHECK([without-chains.traces], [DESCENDANTS, LEAVES],
[[DESCENDANTS
  $accept: $accept
  rhs: rhs
  named_ref.opt: 'b' named_ref.opt
  symbol: 'i' 's' symbol
LEAVES
  $accept: $accept
  rhs: rhs
  named_ref.opt: 'b'
  symbol: 'i'
]])


AT_CHAIN_CHECK([i],  [], [ignore], [ignore])
AT_CHAIN_CHECK([ib], [], [ignore], [ignore])
AT_CHAIN_CHECK([sb], [], [ignore], [ignore])
AT_CHAIN_CHECK([s],  [], [ignore], [ignore])

AT_CLEANUP
])


## ---------- ##
## Epilogue.  ##
## ---------- ##

m4_popdef([AT_CHAIN_CHECK])
m4_popdef([AT_CHAIN_PARSERS])
