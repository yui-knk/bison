# Exercising Useless Chains Elimination.                    -*- Autotest -*-

# Copyright (C) 2019 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

AT_BANNER([[Useless Chains Elimination.]])

## --------- ##
## Lalonde.  ##
## --------- ##

AT_SETUP([Lalonde])

AT_BISON_OPTION_PUSHDEFS

AT_DATA([[input.y]],
[[%{
  #include <ctype.h>  /* isdigit. */
  #include <stdio.h>
  #include <stdlib.h> /* abort. */
  #include <string.h> /* strcmp. */

  ]AT_YYLEX_DECLARE[
  ]AT_YYERROR_DECLARE[
%}

%define parse.assert
%define parse.error verbose
%define parse.stats
%define parse.trace

%union {
  int val;
}
%token <val> NUM
%type  <val> expr term
%printer { fprintf (yyo, "%d", $$); } <val>

%%
res:  expr { printf ("%d\n", $1); };
expr: expr '+' term { $$ = $1 + $3; } | term;
term: term '*' NUM  { $$ = $1 * $3; } | NUM;
%%

]AT_YYLEX_PROTOTYPE[
{
  int c;

  while (isspace (c = getchar ()))
    continue;

  if (isdigit (c))
    {
      ungetc (c, stdin);
      if (scanf ("%d", &yylval.val) != 1)
        abort ();
      return NUM;
    }
  else
    return c;
}

]AT_YYERROR_DEFINE[
]AT_MAIN_DEFINE[
]])

AT_CHECK([cp input.y with-chains.y])
AT_FULL_COMPILE([[with-chains]])

AT_CHECK([cp input.y without-chains.y])
AT_FULL_COMPILE([[without-chains]], [], [], [], [-fchain])

# AT_TEST(INPUT, EXPOUT, NUM-REDS-WITH-CHAINS, NUM-REDS-WITHOUT-CHAINS)
# ---------------------------------------------------------------------
m4_pushdef([AT_TEST],
[AT_DATA([[in.txt]],
[[$1
]])
AT_PARSER_CHECK([with-chains -s <in.txt], [0], [$2
], [stderr])
AT_CHECK([sed -n '/num_reductions: /{s///;p;q;}' stderr], [], [$3
])
AT_PARSER_CHECK([without-chains -s <in.txt], [0], [$2
], [stderr])
AT_CHECK([sed -n '/num_reductions: /{s///;p;q;}' stderr], [], [$4
])
])

AT_TEST([1],          [1], [3], [1])
AT_TEST([1+2],        [3], [5], [2])
AT_TEST([1+2*3],      [7], [6], [3])
AT_TEST([1+2*3*4+5], [30], [9], [5])
AT_TEST([1*2+3+4*5], [25], [9], [5])

m4_popdef([AT_TEST])

AT_BISON_OPTION_POPDEFS

AT_CLEANUP
